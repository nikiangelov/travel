# City
type Population {
  year: Int
  total: Int
  density: Int
}

input PopulationInput {
  year: Int
  total: Int
  density: Int
}

type Coordinates {
  lat: Float
  lng: Float
}

input CoordinatesInput {
  lat: Float!
  lng: Float!
}

# Quote Types
type Quote {
  quote: String
  author: String
}

input QuoteInput {
  quote: String
  author: String
}

# Transport Types
type Transport {
  options: [TransportOption]
}

type TransportOption {
  type: String
  description: String
  price: [TransportPrice]
  price_range: TransportPriceRange
}

type TransportPrice {
  title: String
  value: Float
  currency: String
}

type TransportPriceRange {
  min: Float
  max: Float
  currency: String
}

input TransportInput {
  options: [TransportOptionInput]
}

input TransportOptionInput {
  type: String
  description: String
  price: [TransportPriceInput]
  price_range: TransportPriceRangeInput
}

input TransportPriceInput {
  title: String
  value: Float
  currency: String
}

input TransportPriceRangeInput {
  min: Float
  max: Float
  currency: String
}

type Attraction {
  _id: ID!
  name: String
  description: String
  is_translated: Boolean
  description_short: String
  city_code: String
  city_url_slug: String
  country_code: String
  wikipedia_article_url: String
  coordinates: Coordinates
  phone: String
  work_time_description: String
  is_free: Boolean
  tickets: TicketsType
  firebase_storage_path: String
}

type TicketsType {
  adult: Float
  reduced: Float
  currency: String
}

input TicketsTypeInput {
  adult: Float
  reduced: Float
  currency: String
}

input AttractionInput {
  name: String
  description: String
  description_short: String
  is_translated: Boolean
  city_code: String
  city_url_slug: String
  country_code: String
  wikipedia_article_url: String
  coordinates: CoordinatesInput
  phone: String
  work_time_description: String
  is_free: Boolean
  tickets: TicketsTypeInput
  firebase_storage_path: String
}

type Query {
  attractions(_id: ID, city_url_slug: String, limit: Int): [Attraction]
  attraction(_id: ID): Attraction
  cities: [City]
  city(_id: ID, url_slug: String): City
  country(code: String): Country
  countries: [Country]
  user(_id: String!): User
  users: [User]
  currentUser: User
  travellogs: [Travellog]
  travellog(_id: ID): Travellog
  userCount: Int
}

type Mutation {
  addAttraction(attraction: AttractionInput!): Attraction
  addAttractions(attractions: [AttractionInput]): [Attraction]
  editAttraction(_id: String!, attraction: AttractionInput!): Attraction
  addCity(city: CityInput): City
  addCountry(country: CountryInput!): Country
  registerUser(user: UserInput!): LoginResponse
  loginUser(email: String!, password: String!): LoginResponse
  logoutUser: Boolean
  deleteUser(_id: String!): User
  editUser(_id: String!, user: UserEditInput!): User
  newTravellog: Travellog
  editTravellog(_id: ID, travellog: TravellogInput): Travellog
  setUserCount(count: Int!): Int
}

type City {
  _id: String!
  name: String!
  description: String
  history: String
  history_en: String
  sub_name: String
  url_slug: String
  iata_code: String!
  country_code: String!
  wiki_article_url: String
  wiki_article_en_url: String
  wiki_voyage_article_url: String
  backdrop_image: String
  featured_image_vertical: String
  featured_image_thumb: String
  population: Population
  coordinates: Coordinates!
  website: String
  timezone: String
  utc_offset: String
  metro: Metro
  quote: Quote
  temperature: Float
  climate_description: String
  climate_description_en: String
  transport: Transport
  transport_description: String
  transport_description_en: String
  parking: String
  parking_en: String
  vlogs: [String]
  description_wiki_short: String
  description_wiki_short_html: String
  description_wiki: String
}

input CityInput {
  name: String!
  description: String
  history: String
  history_en: String
  sub_name: String
  url_slug: String
  iata_code: String!
  country_code: String!
  wiki_article_url: String
  wiki_article_en_url: String
  wiki_voyage_article_url: String
  backdrop_image: String
  featured_image_vertical: String
  featured_image_thumb: String
  population: PopulationInput
  coordinates: CoordinatesInput!
  website: String
  timezone: String
  utc_offset: String
  metro: MetroInput
  quote: QuoteInput
  temperature: Float
  climate_description: String
  climate_description_en: String
  transport: TransportInput
  transport_description: String
  transport_description_en: String
  parking: String
  parking_en: String
  vlogs: [String]
  description_wiki_short: String
  description_wiki_short_html: String
  description_wiki: String
}

type WorkHour {
  start: String
  end: String
}

input WorkHourInput {
  start: String
  end: String
}

type Metro {
  map_image_url: String
  map_image_page_url: String
  map_attribution: String
  map_attribution_html: String
  attribution_required: Boolean
  working_hours: WorkHour
}

input MetroInput {
  map_image_url: String
  map_image_page_url: String
  map_attribution: String
  map_attribution_html: String
  attribution_required: Boolean
  working_hours: WorkHourInput
}

type Country {
  _id: String!
  name: String!
  description: String
  code: String!
  capital: String!
  capital_iata_code: String!
  population: Int
  region: String
  region_en: String
  subregion: String
  subregion_en: String
  coordinates: Coordinates!
  area: Int
  gini: Float
  timezones: String
  timezone_simple: String
  timezone_code: String
  borders: [String]
  currencies: [String]
  flag: String
  eu: Boolean
  schengen: Boolean
  gpi_rank: Int
  gpi_rank_max: Int
  gpi_score: Float
  gpi_score_min: Float
  gpi_score_max: Float
  price_level: Int
  price_level_max: Int
  price_level_min: Int
  qol: QualityOfLife
  languages: [String]
  wikipedia_article: String
  music: [String]
  facts: [String]
  phrases: [Phrase]
}

input CountryInput {
  name: String!
  description: String
  code: String!
  capital: String!
  capital_iata_code: String!
  population: Int
  region: String
  region_en: String
  subregion: String
  subregion_en: String
  coordinates: CoordinatesInput!
  area: Int
  gini: Float
  timezones: String
  timezone_simple: String
  timezone_code: String
  borders: [String]
  currencies: [String]
  flag: String
  eu: Boolean
  schengen: Boolean
  gpi_rank: Int
  gpi_rank_max: Int
  gpi_score: Float
  gpi_score_min: Float
  gpi_score_max: Float
  price_level: Int
  price_level_max: Int
  price_level_min: Int
  qol: QualityOfLifeInput
  languages: [String]
  wikipedia_article: String
  music: [String]
  facts: [String]
  phrases: [PhraseInput]
}

type QualityOfLife {
  total: Int
  safety: Int
  healt_care: Int
  pollution: Int
  climate: Int
}

type Phrase {
  origin: String
  transcript: String
  bg: String
}

input QualityOfLifeInput {
  total: Int
  safety: Int
  healt_care: Int
  pollution: Int
  climate: Int
}

input PhraseInput {
  origin: String
  transcript: String
  bg: String
}

type User {
  _id: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  userType: String!
}

input UserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  passwordConfirm: String!
}

input UserEditInput {
  firstName: String
  lastName: String
  password: String
  userType: String
}

type LoginResponse {
  accessToken: String
  user: User
}

type Travellog {
  _id: String!
  title: String
  author: Author
  short_description: String
  html_content: String
  plain_text_content: String
  where: String
  duration: String
  price: String
  category: String
  season: String
  is_draft: Boolean
  created_at: String
  updated_at: String
}

type Author {
  _id: String!
  firstName: String
  lastName: String
  avatar: String
  email: String!
}

input AuthorInput {
  _id: String!
  firstName: String
  lastName: String
  avatar: String
  email: String!
}

input TravellogInput {
  title: String
  author: AuthorInput
  short_description: String
  html_content: String
  plain_text_content: String
  where: String
  duration: String
  price: String
  category: String
  season: String
  is_draft: Boolean
}

schema {
  query: Query
  mutation: Mutation
}
